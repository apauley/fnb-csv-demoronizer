#!/usr/bin/env python3

import sys, csv, datetime
import os.path

short_months_afr=['Jan','Feb','Mar','Apr','Mei','Jun','Jul','Aug','Sep','Okt','Nov','Des']
short_months_eng=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']

def month_index():
    index = {}
    for month_list in [short_months_afr, short_months_eng]:
        index.update({k: v+1 for v, k in enumerate(month_list)})
    return index

def extract_year_from_longform_date(datestr):
    split = datestr.split()
    if len(split) == 3:
        year = int(split[2].strip("'"))
    else:
        year = None
    return year

def determine_trx_year(previous_trx_date, month):
    if month < previous_trx_date.month:
        year = previous_trx_date.year + 1
    else:
        year = previous_trx_date.year
    return year

def parse_short_date(datestr, statement_year, previous_trx_date):
    split=datestr.strip("'").split()
    if len(split) == 2:
        day = int(split[0])
        month = month_index()[split[1]]
        if previous_trx_date:
            year = determine_trx_year(previous_trx_date, month)
        else:
            year = statement_year
        date = datetime.date(year, month, day)
    else:
        date = None
    return date

def demoronize(inputfile, outputfile):
    csvreader = csv.reader(inputfile)
    csvwriter = csv.writer(outputfile, dialect='unix')
    previous_trx_date = None
    for row in csvreader:
        if row[0] == '3' and len(row) > 3:
            statement_year=extract_year_from_longform_date(row[2])
        if row[0] == '5' and len(row) > 3:
            date=parse_short_date(row[2], statement_year, previous_trx_date)
            previous_trx_date = date
            if date:
                row[2] = date.isoformat()
            csvwriter.writerow(row)
    inputfile.close()
    outputfile.close()

def parse_args(args):
    if len(args) < 2:
        usage = "USAGE: {0} statement.csv [output.csv]".format(os.path.basename(args[0]))
        print(usage, file=sys.stderr)
        sys.exit(1)
    else:
        inputfile = open(args[1])
        if len(args) == 3:
            outputfile = open(args[2], 'w')
        else:
            outputfile = sys.stdout
        return inputfile, outputfile

if __name__ == '__main__':
    inputfile, outputfile = parse_args(sys.argv)
    demoronize(inputfile, outputfile)

#!/usr/bin/env python3

import sys, csv, os.path
from datetime import date

month_names_short = [
    ['Jan'],
    ['Feb'],
    ['Mrt', 'Mar', 'Maa'],
    ['Apr'],
    ['Mei', 'May'],
    ['Jun'],
    ['Jul'],
    ['Aug'],
    ['Sep'],
    ['Okt', 'Oct'],
    ['Nov'],
    ['Des', 'Dec'],
]

month_names_long = [
    ['Januarie', 'January'],
    ['Februarie', 'February'],
    ['Maart', 'March'],
    ['April'],
    ['Mei', 'May'],
    ['Junie', 'June'],
    ['Julie', 'July'],
    ['Augustus', 'August'],
    ['September'],
    ['Oktober', 'October'],
    ['November'],
    ['Desember', 'December'],
]

def month_index(months):
    """Create mappping of month names (multiple languages) to their corresponding month numbers.

    >>> month_index(month_names_short)
    {'Jan': 1, 'Feb': 2, 'Mrt': 3, 'Mar': 3, 'Maa': 3, 'Apr': 4, 'Mei': 5, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Okt': 10, 'Oct': 10, 'Nov': 11, 'Des': 12, 'Dec': 12}

    >>> month_index(month_names_long)
    {'Januarie': 1, 'January': 1, 'Februarie': 2, 'February': 2, 'Maart': 3, 'March': 3, 'April': 4, 'Mei': 5, 'May': 5, 'Junie': 6, 'June': 6, 'Julie': 7, 'July': 7, 'Augustus': 8, 'August': 8, 'September': 9, 'Oktober': 10, 'October': 10, 'November': 11, 'Desember': 12, 'December': 12}
    """
    index = {}
    for (i, month_list) in enumerate(months):
        index.update({k: i+1 for k in month_list})
    return index

month_index_short = month_index(month_names_short)
month_index_long  = month_index(month_names_long)

def parse_longform_date(datestr):
    """Convert a string such as '31 Desember 2019' into a date.

    >>> parse_longform_date("'31 Desember 2019'")
    datetime.date(2019, 12, 31)
    >>> parse_longform_date("12 April 2032")
    datetime.date(2032, 4, 12)
    """
    split = datestr.split()
    if len(split) == 3:
        day = int(split[0].strip("'"))
        month = month_index_long[split[1].strip("'")]
        year = int(split[2].strip("'"))
        return date(year, month, day)
    else:
        return None

def determine_trx_year(previous_trx_date, current_month):
    """Calculate transaction year for the current transaction based on a previous full date.

    >>> determine_trx_year(date(2019,12,28), 30)
    2019
    >>> determine_trx_year(date(2019,12,28), 1)
    2020
    """
    if current_month < previous_trx_date.month:
        year = previous_trx_date.year + 1
    else:
        year = previous_trx_date.year
    return year

def parse_short_date(datestr, statement_date, previous_trx_date):
    """Parse a date string without an explicit year into a proper date, by using the start date of the statement that does have a year.

    >>> parse_short_date('29 Des', date(2017, 12, 28), None)
    datetime.date(2017, 12, 29)

    >>> parse_short_date('01 Jan', date(2017, 12, 28), date(2017, 12, 29))
    datetime.date(2018, 1, 1)

    >>> parse_short_date('02 Jan', date(2019, 12, 31), None)
    datetime.date(2020, 1, 2)
    """
    split=datestr.strip("'").split()
    if len(split) == 2:
        day = int(split[0])
        month = month_index_short[split[1]]
        if previous_trx_date:
            year = determine_trx_year(previous_trx_date, month)
        else:
            year = determine_trx_year(statement_date, month)
        return date(year, month, day)
    else:
        return None

def demoronize(inputfile, outputfile):
    csvreader = csv.reader(inputfile)
    csvwriter = csv.writer(outputfile, dialect='unix')
    previous_trx_date = None
    for row in csvreader:
        if row[0] == '3' and len(row) > 3 and row[1].isnumeric():
            statement_date=parse_longform_date(row[2])
        if row[0] == '5' and len(row) > 3:
            trx_date=parse_short_date(row[2], statement_date, previous_trx_date)
            previous_trx_date = trx_date
            if trx_date:
                row[2] = trx_date.isoformat()
            csvwriter.writerow(row)
    inputfile.close()
    outputfile.close()

def parse_args(args):
    if len(args) < 2:
        usage = "USAGE: {0} statement.csv [output.csv]".format(os.path.basename(args[0]))
        print(usage, file=sys.stderr)
        sys.exit(1)
    else:
        inputfile = open(args[1])
        if len(args) == 2 or args[2] == '-':
            outputfile = sys.stdout
        else:
            outputfile = open(args[2], 'w')
        return inputfile, outputfile

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        import doctest
        res = doctest.testmod()
        sys.exit(res.failed)
    else:
        inputfile, outputfile = parse_args(sys.argv)
        demoronize(inputfile, outputfile)
